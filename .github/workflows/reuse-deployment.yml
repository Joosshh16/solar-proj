name: Containerization - Reusable Workflow

on:
    workflow_call: 
        #for env ennvronment within 1 workflow passing to main workflow
        # inputs:
        #   mongodb-uri:
        #     required: true
        #     type: string
            # kubectl-version:
            #     description: Provide the required kubectl version
            #     default: v1.26.0
            #     required: false
            #     type: string
            # k8s-manifest-dir:
            #     description: Directory containing kubernetes manifests files
            #     default: kubernetes/
            #     required: true
            #     type: string
            # environment:
            #     description: Provide the Deployment Environment
            #     default: dev
            #     required: true
            #     type: string
                #can get this inputs from kubectl-version to environment -- to jobs steps
                #sample '$ {{ inputs.kubectl-version}}'
                # in main workflow to get the input is
                #with:
                    #environment: production
                    #k8s-manifest-dir: kubernetes/production

#         outputs:
#             application_url:
#                 value: ${{ jobs.reuse-deploy.outputs.valuesampleherefromjobshereinthisfile }}

# in dev-integration testing in main workflow
#     steps:
#         - name: TEST URL Output using CURL and JQ
#           env:
#             URL: ${{ needs.dev-deploy.outputs.application_url }}
#           run: |
#             echo $URL
#             echo "------------------------"
#             curl https://$URL/live -s -k | jq -r .status | grep -i live


        secrets:
            docker-pass:
                required: true

jobs:
    reuse-deploy:
        permissions:
            packages: write
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Dockerhub login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.docker-pass }}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build - Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image - Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - http://127.0.0.1:3000/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/joosshh16/solar-system:${{ github.sha }}
